class <emptyTree><<C <root>>> < ()
  class <emptyTree>::<C Override><<C <todo sym>>> < (<emptyTree>::<C T>::<C Struct>)
    ::T::Sig::WithoutRuntime.sig() do ||
      <self>.params({:"foo" => <emptyTree>::<C String>}).void()
    end

    def initialize<<C <todo sym>>>(foo:, &<blk>)
      <emptyTree>
    end

    <self>.extend(<emptyTree>::<C T>::<C Sig>)

    ::T::Sig::WithoutRuntime.sig() do ||
      <self>.params({}).returns(<emptyTree>::<C String>)
    end

    def foo<<C <todo sym>>>(&<blk>)
      ::T.cast(::T.unsafe(nil), <emptyTree>::<C String>)
    end

    ::T::Sig::WithoutRuntime.sig() do ||
      <self>.params({:"arg0" => <emptyTree>::<C String>}).returns(<emptyTree>::<C String>)
    end

    def foo=<<C <todo sym>>>(arg0, &<blk>)
      ::T.cast(::T.unsafe(nil), <emptyTree>::<C String>)
    end

    <self>.sig() do ||
      <self>.params({:"foo" => <emptyTree>::<C Integer>}).void()
    end

    def initialize<<C <todo sym>>>(foo:, &<blk>)
      @foo = foo.to_s()
    end
  end

  <emptyTree>::<C Override>.new()

  <emptyTree>::<C Override>.new({:"foo" => "no"})

  <emptyTree>::<C Override>.new({:"foo" => 3, :"bar" => 4})

  <emptyTree>::<C T>.reveal_type(<emptyTree>::<C Override>.new({:"foo" => 3}).foo())
end
